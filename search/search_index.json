{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Blueprint docs","text":"<p>Blueprints are customizable workflows that help developers build AI applications using open-source tools and models</p> <p>These docs are your companion to mastering this Blueprint.</p>"},{"location":"#built-with","title":"Built with","text":"<ul> <li>Python 3.10+</li> <li>Tool 1</li> <li>Tool 2</li> </ul>"},{"location":"#get-started-quickly","title":"\ud83d\ude80 Get Started Quickly","text":""},{"location":"#start-building-the-blueprint-in-minutes","title":"Start building the Blueprint in minutes:","text":"<ul> <li>Getting Started: Quick setup and installation instructions.</li> </ul>"},{"location":"#understand-the-system","title":"\ud83d\udd0d Understand the System","text":""},{"location":"#dive-deeper-into-how-the-blueprint-works","title":"Dive deeper into how the Blueprint works:","text":"<ul> <li>Step-by-Step Guide: A detailed breakdown of the system\u2019s design and workflow.</li> <li>API Reference: Explore the technical details of the core modules.</li> </ul>"},{"location":"#make-it-yours","title":"\ud83c\udfa8 Make It Yours","text":""},{"location":"#customize-the-blueprint-to-fit-your-needs","title":"Customize the Blueprint to fit your needs:","text":"<ul> <li>Customization Guide: Tailor project parameters to fit your needs</li> </ul>"},{"location":"#join-the-community","title":"\ud83c\udf1f Join the Community","text":""},{"location":"#help-shape-the-future-of-blueprints","title":"Help shape the future of Blueprints:","text":"<ul> <li>Future Features &amp; Contributions: Learn about exciting upcoming features and how to contribute to the project.</li> </ul> <p>Have more questions? Reach out to us on GitHub Discussions.</p>"},{"location":"#why-blueprints","title":"Why Blueprints?","text":"<p>Blueprints are more than starter code\u2014they\u2019re your gateway to building AI-powered solutions with confidence. With step-by-step guidance, modular design, and open-source tools, we make AI accessible for developers of all skill levels.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#structured_qa.preprocessing","title":"<code>structured_qa.preprocessing</code>","text":""},{"location":"api/#structured_qa.preprocessing.document_to_sections_dir","title":"<code>document_to_sections_dir(input_file, output_dir)</code>","text":"<p>Convert a document to a directory of sections.</p> <p>Uses pymupdf4llm to convert input_file to markdown. Then uses langchain_text_splitters to split the markdown into sections based on the headers.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>str</code> <p>Path to the input document.</p> required <code>output_dir</code> <code>str</code> <p>Path to the output directory. Structure of the output directory:</p> <pre><code>output_dir/\n    section_1.txt\n    section_2.txt\n    ...\n</code></pre> required <p>Returns:</p> Type Description <code>list[str]</code> <p>List of section names.</p> Source code in <code>src/structured_qa/preprocessing.py</code> <pre><code>@logger.catch(reraise=True)\ndef document_to_sections_dir(input_file: str, output_dir: str) -&gt; list[str]:\n    \"\"\"\n    Convert a document to a directory of sections.\n\n    Uses [pymupdf4llm](https://pypi.org/project/pymupdf4llm/) to convert input_file to markdown.\n    Then uses [langchain_text_splitters](https://pypi.org/project/langchain-text-splitters/) to split the markdown into sections based on the headers.\n\n    Args:\n        input_file: Path to the input document.\n        output_dir: Path to the output directory.\n            Structure of the output directory:\n\n            ```\n            output_dir/\n                section_1.txt\n                section_2.txt\n                ...\n            ```\n\n    Returns:\n        List of section names.\n    \"\"\"\n\n    logger.info(f\"Converting {input_file}\")\n    md_text = pymupdf4llm.to_markdown(input_file)\n    logger.success(\"Converted\")\n\n    logger.info(\"Extracting sections\")\n    splitter = MarkdownHeaderTextSplitter(\n        headers_to_split_on=[(\"#\", \"Header 1\"), (\"##\", \"Header 2\"), (\"###\", \"Header 3\")]\n    )\n    sections = splitter.split_text(md_text)\n    logger.success(f\"Found {len(sections)} sections\")\n\n    logger.info(f\"Writing sections to {output_dir}\")\n    output_dir = Path(output_dir)\n    output_dir.mkdir(exist_ok=True, parents=True)\n    section_names = []\n    for section in sections:\n        if not section.metadata:\n            continue\n        section_name = list(section.metadata.values())[-1].lower()\n        section_names.append(section_name)\n        (output_dir / f\"{section_name.replace('/', '_')}.txt\").write_text(\n            section.page_content\n        )\n    logger.success(\"Done\")\n\n    return section_names\n</code></pre>"},{"location":"cli/","title":"Command Line Interface","text":"<p>Once you have installed the blueprint, you can use it from the CLI.</p> <p>You can either provide the path to a configuration file:</p> <pre><code>structured-qa --from_config \"example_data/config.yaml\"\n</code></pre> <p>Or provide values to the arguments directly:</p> <pre><code>structured-qa \\\n--question \"What learning rate was used?\" \\\n--input_file \"example_data/1706.03762v7.pdf\" \\\n--output_folder \"example_outputs/1706.03762v7.pdf\"\n</code></pre>"},{"location":"cli/#structured_qa.cli.structured_qa","title":"<code>structured_qa.cli.structured_qa(question, input_file=None, output_dir=None, model='Qwen/Qwen2.5-3B-Instruct-GGUF/Qwen2.5-3B-Instruct-f16.gguf', find_prompt=FIND_PROMPT, answer_prompt=ANSWER_PROMPT, from_config=None)</code>","text":"<p>Structured Question Answering.</p> <p>Split the input document into sections and answer the question based on the sections.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>str | None</code> <p>Path to the input document.</p> <code>None</code> <code>output_dir</code> <code>str | None</code> <p>Path to the output directory. Structure of the output directory:</p> <pre><code>output_dir/\n    section_1.txt\n    section_2.txt\n    ...\n</code></pre> <code>None</code> <code>model</code> <code>str | None</code> <p>Model identifier formatted as <code>owner/repo/file</code>. Must be hosted at the HuggingFace Hub in GGUF format.</p> <code>'Qwen/Qwen2.5-3B-Instruct-GGUF/Qwen2.5-3B-Instruct-f16.gguf'</code> <code>question</code> <code>str</code> <p>The question to answer.</p> required <code>find_prompt</code> <code>str</code> <p>The prompt to find the section.</p> <code>FIND_PROMPT</code> <code>answer_prompt</code> <code>str</code> <p>The prompt to answer the question.</p> <code>ANSWER_PROMPT</code> <code>from_config</code> <code>str | None</code> <p>The path to the config file.</p> <p>If provided, all other arguments will be ignored.</p> <code>None</code> Source code in <code>src/structured_qa/cli.py</code> <pre><code>@logger.catch(reraise=True)\ndef structured_qa(\n    question: str,\n    input_file: str | None = None,\n    output_dir: str | None = None,\n    model: str | None = \"Qwen/Qwen2.5-3B-Instruct-GGUF/Qwen2.5-3B-Instruct-f16.gguf\",\n    find_prompt: str = FIND_PROMPT,\n    answer_prompt: str = ANSWER_PROMPT,\n    from_config: str | None = None,\n):\n    \"\"\"\n    Structured Question Answering.\n\n    Split the input document into sections and answer the question based on the sections.\n\n    Args:\n        input_file: Path to the input document.\n        output_dir: Path to the output directory.\n            Structure of the output directory:\n\n            ```\n            output_dir/\n                section_1.txt\n                section_2.txt\n                ...\n            ```\n        model: Model identifier formatted as `owner/repo/file`.\n            Must be hosted at the HuggingFace Hub in GGUF format.\n        question: The question to answer.\n        find_prompt: The prompt to find the section.\n        answer_prompt: The prompt to answer the question.\n        from_config: The path to the config file.\n\n            If provided, all other arguments will be ignored.\n    \"\"\"\n    if from_config:\n        raw_config = yaml.safe_load(Path(from_config).read_text())\n        Path(raw_config[\"output_dir\"]).mkdir(exist_ok=True, parents=True)\n        config = Config.model_validate(raw_config)\n    else:\n        Path(output_dir).mkdir(exist_ok=True, parents=True)\n        config = Config(\n            input_file=input_file,\n            output_dir=output_dir,\n            model=model,\n            find_prompt=find_prompt,\n            answer_prompt=answer_prompt,\n        )\n\n    logger.info(\"Loading and converting to sections\")\n    document_to_sections_dir(config.input_file, config.output_dir)\n    logger.success(\"Done\")\n\n    logger.info(\"Loading Model\")\n    org, repo, filename = config.model.split(\"/\")\n    model = Llama.from_pretrained(\n        repo_id=f\"{org}/{repo}\",\n        filename=filename,\n        n_ctx=0,\n        n_gpu_layers=-1 if torch.cuda.is_available() else 0,\n        verbose=False,\n    )\n    logger.success(\"Done\")\n\n    logger.info(\"Answering\")\n    answer, sections_checked = find_retrieve_answer(\n        model=model,\n        sections_dir=config.output_dir,\n        question=question,\n        find_prompt=config.find_prompt,\n        answer_prompt=config.answer_prompt,\n    )\n    logger.success(\"Done\")\n\n    logger.info(\"Sections checked:\")\n    logger.info(sections_checked)\n    logger.info(\"Answer:\")\n    logger.info(answer)\n</code></pre>"},{"location":"cli/#structured_qa.config.Config","title":"<code>structured_qa.config.Config</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>src/structured_qa/config.py</code> <pre><code>class Config(BaseModel):\n    input_file: FilePath\n    output_dir: DirectoryPath\n    model: Annotated[str, AfterValidator(validate_model)]\n    answer_prompt: Annotated[str, AfterValidator(answer_prompt)]\n    find_prompt: Annotated[str, AfterValidator(validate_find_prompt)]\n</code></pre>"},{"location":"customization/","title":"\ud83c\udfa8 Customization Guide","text":"<p>This Blueprint is designed to be flexible and easily adaptable to your specific needs. This guide will walk you through some key areas you can customize to make the Blueprint your own.</p>"},{"location":"customization/#changing-the-model","title":"\ud83e\udde0 Changing the Model","text":""},{"location":"customization/#modifying-the-system-prompt","title":"\ud83d\udcdd Modifying the system Prompt","text":""},{"location":"customization/#other-customization-ideas","title":"\ud83d\udca1 Other Customization Ideas","text":"<ul> <li>other ideas..</li> </ul>"},{"location":"customization/#contributing-to-the-blueprint","title":"\ud83e\udd1d Contributing to the Blueprint","text":"<p>Want to help improve or extend this Blueprint? Check out the Future Features &amp; Contributions Guide to see how you can contribute your ideas, code, or feedback to make this Blueprint even better!</p>"},{"location":"future-features-contributions/","title":"\ud83d\ude80 Future Features &amp; Contributions","text":"<p>This Blueprint is an evolving project designed to grow with the help of the open-source community. Whether you\u2019re an experienced developer or just starting, there are many ways you can contribute and help shape the future of this tool.</p>"},{"location":"future-features-contributions/#how-you-can-contribute","title":"\ud83c\udf1f How You Can Contribute","text":""},{"location":"future-features-contributions/#enhance-the-blueprint","title":"\ud83d\udee0\ufe0f Enhance the Blueprint","text":"<ul> <li>Check the Issues page to see if there are feature requests you'd like to implement</li> <li>Refer to our Contribution Guide for more details on contributions</li> </ul>"},{"location":"future-features-contributions/#extensibility-ideas","title":"\ud83c\udfa8 Extensibility Ideas","text":"<p>This Blueprint is designed to be a foundation you can build upon. By extending its capabilities, you can open the door to new applications, improve user experience, and adapt the Blueprint to address other use cases. Here are a few ideas for how you can expand its potential:</p> <p>We\u2019d love to see how you can enhance this Blueprint! If you create improvements or extend its capabilities, consider contributing them back to the project so others in the community can benefit from your work. Check out our Contributions Guide to get started!</p>"},{"location":"future-features-contributions/#share-your-ideas","title":"\ud83d\udca1 Share Your Ideas","text":"<p>Got an idea for how this Blueprint could be improved? You can share your suggestions through GitHub Discussions.</p>"},{"location":"future-features-contributions/#build-new-blueprints","title":"\ud83c\udf0d Build New Blueprints","text":"<p>This project is part of a larger initiative to create a collection of reusable starter code solutions that use open-source AI tools. If you\u2019re inspired to create your own Blueprint, you can use the Blueprint-template to get started.</p> <p>Your contributions help make this Blueprint better for everyone \ud83c\udf89</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Get started with this Blueprint using one of the options below:</p>"},{"location":"getting-started/#option-1","title":"Option 1:","text":""},{"location":"getting-started/#option-2","title":"Option 2:","text":""},{"location":"step-by-step-guide/","title":"Step-by-Step Guide: How this Blueprint Works","text":""},{"location":"step-by-step-guide/#overview","title":"Overview","text":""},{"location":"step-by-step-guide/#step-1","title":"Step 1","text":""},{"location":"step-by-step-guide/#step-2","title":"Step 2","text":""},{"location":"step-by-step-guide/#step-3","title":"Step 3","text":""},{"location":"step-by-step-guide/#customizing-the-blueprint","title":"\ud83c\udfa8 Customizing the Blueprint","text":"<p>To better understand how you can tailor this Blueprint to suit your specific needs, please visit the Customization Guide.</p>"},{"location":"step-by-step-guide/#contributing-to-the-blueprint","title":"\ud83e\udd1d Contributing to the Blueprint","text":"<p>Want to help improve or extend this Blueprint? Check out the Future Features &amp; Contributions Guide to see how you can contribute your ideas, code, or feedback to make this Blueprint even better!</p>"}]}